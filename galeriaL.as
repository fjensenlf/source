package  {		//mover pasta "images", "caurina" e "fonts" para dentro da pasta "src"	//por o ficheiro 'slideshow-data.xml' na mesma directoria do .fla		import flash.display.Sprite;	import flash.display.MovieClip;	import caurina.transitions.Tweener;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.net.URLLoader;		import flash.text.TextField;	import flash.text.Font;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormatAlign;	import flash.display.Shape;	import flash.display.Bitmap;		public class galeriaL extends Sprite {		public const TIMER_DELAY:int = 5000;		public const FADE_TIME:int =	1;		public var currentContainer:Sprite;// index of the current slide		public var intCurrentSlide:int = -1;// total slides		public var intSlideCount:int;// timer for switching slides		public var slideTimer:Timer;// slides holder		public var sprContainer1:Sprite;		public var sprContainer2:Sprite;// slides loader		public var slideLoader:Loader;// url to slideshow xml		public var strXMLPath:String = "slideshow-data.xml";// slideshow xml loader		public var xmlLoader:URLLoader;// slideshow xml		public var xmlSlideshow:XML;		public var mcSlideHolder:MovieClip;		public var price:TextField;		public var priceO:TextField;		public var desc:TextField;		public var lbl_loading:TextField;		public var textFormat:TextFormat;		public var textFormatR:TextFormat;		public var textFormatP1:TextFormat;		public var textFormatP2:TextFormat;		public var textFormatPO:TextFormat;		public var textFormatE:TextFormat;		public var barra:Loader;      	[Embed(source="/fonts/font01.otf",		    fontName = "myFont", 		    mimeType = "application/x-font", 		    fontWeight="normal", 		    fontStyle="normal", 		    advancedAntiAliasing="true", 		    embedAsCFF="false")]		private var fontFontSample:Class;				public function galeriaL() {			super();						var rectangle:Shape = new Shape;			rectangle.graphics.beginFill(0x000000);			rectangle.graphics.drawRect(0, 0, 490,800); 			rectangle.graphics.endFill();			rectangle.alpha = 0.4;			addChild(rectangle);						var rectangle2:Shape = new Shape;			rectangle2.graphics.beginFill(0x000000);			rectangle2.graphics.drawRect(30, 470, 430, 6); 			rectangle2.graphics.endFill();			addChild(rectangle2);						var rectangle3:Shape = new Shape;			rectangle3.graphics.beginFill(0x000000);			rectangle3.graphics.drawRect (147, 565, 196, 235); 			rectangle3.graphics.endFill();			rectangle3.alpha = 0.4;			addChild(rectangle3); 			textFormat= new TextFormat();			textFormat.font = "myFont";			textFormat.size = 60;			textFormat.align = TextFormatAlign.LEFT;						textFormatE= new TextFormat();			textFormatE.font = "myFont";			textFormatE.size = 40;			textFormatE.align = TextFormatAlign.LEFT;			textFormatR= new TextFormat();			textFormatR.font = "myFont";			textFormatR.size = 60;			textFormatR.align = TextFormatAlign.RIGHT;						textFormatP1= new TextFormat();			textFormatP1.font = "myFont";			textFormatP1.size = 17,5;			textFormatP1.align = TextFormatAlign.CENTER;						textFormatP2= new TextFormat();			textFormatP2.font = "myFont";			textFormatP2.size = 27,7;			textFormatP2.align = TextFormatAlign.CENTER;						textFormatPO= new TextFormat();			textFormatPO.font = "myFont";			textFormatPO.size = 40;			textFormatPO.align = TextFormatAlign.RIGHT;			//textFormat.bold = true;			//textFormat.letterSpacing = 1; 			/*var textField:TextField = new TextField();			textField.width = 600;			textField.embedFonts = true			textField.text = "Use embeded font";			textField.textColor = 0x000000;			textField.setTextFormat(textFormat);*/  			var euro:TextField = new TextField();			euro.width = 60;			euro.embedFonts = true;			euro.text = "€";			euro.textColor = 0xffffff;			euro.setTextFormat(textFormat);			this.addChild(euro);			euro.y = 485;			euro.x = 420;						var euro2:TextField = new TextField();			euro2.width = 60;			euro2.embedFonts = true;			euro2.text = "€";			euro2.textColor = 0xc6c6c6;			euro2.setTextFormat(textFormatE);			this.addChild(euro2);			euro2.y = 535;			euro2.x = 430;						var play1:TextField = new TextField();			play1.width = 196;			play1.embedFonts = true;			play1.text = "APROXIME-SE PARA";			play1.textColor = 0xffffff;			play1.setTextFormat(textFormatP1);			this.addChild(play1);			play1.y = 713;			play1.x = 146;						var play2:TextField = new TextField();			play2.width = 196;			play2.embedFonts = true;			play2.text = "VER O VIDEO";			play2.textColor = 0xffffff;			play2.setTextFormat(textFormatP2);			this.addChild(play2);			play2.y = 730;			play2.x = 146;						lbl_loading = new TextField();			addChild(lbl_loading);						price = new TextField();			priceO = new TextField();			desc = new TextField();						var playBtn:Loader = new Loader();			playBtn.load(new URLRequest("/src/images/embedded/playBtn.png"));			addChild(playBtn);			playBtn.y = 590;			playBtn.x = 198;						xmlLoader = new URLLoader();			// add listener for complete event			xmlLoader.addEventListener(Event.COMPLETE, onXMLLoadComplete);			// load xml file			xmlLoader.load(new URLRequest(strXMLPath));					// create new timer with delay from constant			slideTimer = new Timer(TIMER_DELAY);			// add event listener for timer event			slideTimer.addEventListener(TimerEvent.TIMER, switchSlide);					// create 2 container sprite which will hold the slides and			// add them to the masked movieclip			sprContainer1 = new Sprite();			sprContainer2 = new Sprite();					addChild(sprContainer1);			addChild(sprContainer2);					// keep a reference of the container which is currently			// in the front			currentContainer = sprContainer2;						barra = new Loader();			barra.load(new URLRequest("/src/images/embedded/barra.png"));			addChild(barra);			barra.x = 380;			barra.y = 535;			barra.alpha = 0;		}				function onXMLLoadComplete(e:Event):void {			// create new xml with the received data			xmlSlideshow = new XML(e.target.data);			// get total slide count			intSlideCount = xmlSlideshow..image.length();			// switch the first slide without a delay			switchSlide(null);			xmlLoader.removeEventListener(Event.COMPLETE, onXMLLoadComplete);		}				function fadeSlideIn(e:Event):void {			// add loaded slide from slide loader to the			// current container			var bit:Bitmap = e.target.content;			if(bit != null) {				bit.smoothing = true;				bit.width = 430;				bit.height = 430;				bit.x = 30;				bit.y = 30;				//slideLoader.content.smoothing = true;				currentContainer.addChild(bit);				//thumb_mc.addChild(e.target.content);			}				/*slideLoader.content.width = 460;			slideLoader.content.height = 460;			slideLoader.content.x = 15;			slideLoader.content.y = 15;			//slideLoader.content.smoothing = true;			currentContainer.addChild(slideLoader.content);*/			// clear preloader text			lbl_loading.text = "";			// fade the current container in and start the slide timer			// when the tween is finished			Tweener.addTween(currentContainer, {alpha:1, time:FADE_TIME, onComplete:function() { slideTimer.start(); }});		}		function switchSlide(e:Event):void {			// check, if the timer is running (needed for the			// very first switch of the slide)			if(slideTimer.running)				slideTimer.stop();					// check if we have any slides left and increment			// current slide index			if(intCurrentSlide + 1 < intSlideCount)				intCurrentSlide++;			// if not, start slideshow from beginning			else				intCurrentSlide = 0;					// check which container is currently in the front and			// assign currentContainer to the one that's in the back with			// the old slide			if(currentContainer == sprContainer2)				currentContainer = sprContainer1;			else				currentContainer = sprContainer2;					// hide the old slide			currentContainer.alpha = 0;			// bring the old slide to the front			swapChildren(sprContainer2, sprContainer1);					// create a new loader for the slide			slideLoader = new Loader();			// add event listener when slide is loaded			slideLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, fadeSlideIn);			// add event listener for the progress			//slideLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, showProgress);			// load the next slide			slideLoader.load(new URLRequest(xmlSlideshow..image[intCurrentSlide].@src));					// show description of the next slide						/*price.width = 80;			price.height = 50;*/			price.embedFonts = true;			price.text = xmlSlideshow..image[intCurrentSlide].@desc;			price.textColor = 0xFFFFFF;			price.wordWrap = false;			price.multiline = false;			//price.autoSize = TextFieldAutoSize.LEFT;			this.addChild(price);			price.setTextFormat(textFormatR);			//price.y = 578;			price.x = 320;			Autosize(price, 80, 60);			if (price.textHeight > 59){				price.y = 485;			} else {			price.y = 545 - price.textHeight - 60/price.textHeight*3;			}						priceO.embedFonts = true;			priceO.text = xmlSlideshow..image[intCurrentSlide].@desc3;			priceO.textColor = 0xc6c6c6;			priceO.wordWrap = false;			priceO.multiline = false;			//price.autoSize = TextFieldAutoSize.LEFT;			this.addChild(priceO);			priceO.setTextFormat(textFormatPO);			//price.y = 578;			priceO.x = 335;			Autosize(priceO, 80, 40);			if (priceO.textHeight > 39){				priceO.y = 535;			} else {			priceO.y = 575 - priceO.textHeight - 40/priceO.textHeight*3;			}			if(e != null){				barra.width = 30 + priceO.textWidth;				barra.x = 380 + (80 - barra.width);				if(barra.alpha == 0){					barra.alpha = 1;				}				setChildIndex(barra,numChildren - 1);			}	// show current slide and total slides						/*desc.width = 320;			price.height = 60;*/			desc.embedFonts = true;			desc.text = xmlSlideshow..image[intCurrentSlide].@desc2;			desc.textColor = 0xffffff;			desc.wordWrap = false;			desc.multiline = false;			desc.autoSize = TextFieldAutoSize.LEFT;			this.addChild(desc);			desc.setTextFormat(textFormat);			//desc.y = 578;			desc.x = 30;			Autosize(desc, 300, 60);			if (desc.textHeight > 59){				desc.y = 485;			} else {			desc.y = 545 - desc.textHeight - 60/desc.textHeight*3;			}					}				function Autosize(txt:TextField, maxWidth:int, maxHeight:int):void 		{		  //You set this according to your TextField's dimensions		  var maxTextWidth:int = maxWidth; 		  var maxTextHeight:int = maxHeight; 				  var f:TextFormat = txt.getTextFormat();				  //decrease font size until the text fits  		  while (txt.textWidth > maxTextWidth || txt.textHeight > maxTextHeight) {			f.size = int(f.size) - 1;			txt.setTextFormat(f);		  }		  //txt.y = txt.y - txt.textHeight;		  //txt.y += Math.round((txt.height - txt.textHeight) / 2);				}		public function removeListeners():void		{			slideLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, fadeSlideIn);			slideTimer.removeEventListener(TimerEvent.TIMER, switchSlide);		}			}	}