package  {		import com.as3nui.nativeExtensions.air.kinect.Kinect;	//import com.as3nui.nativeExtensions.air.kinect.KinectSettings;	//import com.as3nui.nativeExtensions.air.kinect.constants.CameraResolution;	//import com.as3nui.nativeExtensions.air.kinect.data.DeviceCapabilities;	import com.as3nui.nativeExtensions.air.kinect.data.SkeletonJoint;	import com.as3nui.nativeExtensions.air.kinect.data.User;	import com.as3nui.nativeExtensions.air.kinect.events.UserEvent;	import com.as3nui.nativeExtensions.air.kinect.events.CameraImageEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceErrorEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceInfoEvent;		import com.as3nui.airkinect.extended.demos.ui.display.SimpleSelectionTimer;	import com.as3nui.airkinect.extended.demos.ui.display.ColoredHandle;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.events.UIEvent;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.objects.Cursor;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.helpers.MouseSimulator;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.managers.UIManager;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.display.BaseTimerSprite;		import flash.net.URLRequest;	import flash.display.Loader;	import flash.display.Shape;	import flash.events.Event;	import caurina.transitions.Tweener;	import flash.display.Stage;	import flash.display.Loader;		//import com.as3nui.nativeExtensions.air.kinect.examples.DemoBase;	import flash.display.Sprite;	import flash.utils.*;	public class HotSpotMak extends Sprite {		private var _gallery:Sprite;		//Gallery		public var instances:Array;		public var target:ColoredHandle;		//public var hotSpotBar:Sprite;		public var bool:Boolean;		public var btn:Loader;		protected var _rightHandCursor:Cursor;		public var device:Kinect;		public var curs:Loader;		public var circle:Shape;		public function HotSpotMak(kin:Kinect) {			bool = true;			addEventListener(Event.ENTER_FRAME, enterFrameHandler, false, 0, true);			device=kin;			curs = new Loader();            curs.load(new URLRequest("/src/images/embedded/cursor.png"));            addChild(curs);			/*curs.x = -curs.width;			curs.y = -curs.height;*/			addEventListener(Event.ADDED_TO_STAGE, addedToStage, false, 0, true);					}				private function createCursor():void {			circle = new Shape();			circle.graphics.beginFill(0xffffffff);			circle.graphics.drawCircle(0, 0, 2);			_rightHandCursor = new Cursor("_kinect_", 1, circle);			UIManager.addCursor(_rightHandCursor);			_rightHandCursor.enabled = false;		}		public function addedToStage(e:Event){			if(bool){				create();				bool = false;			}		}		private function enterFrameHandler(event:Event):void {			if(device.usersWithSkeleton.length >0){				var user:User = device.usersWithSkeleton[0];				var rightHand:SkeletonJoint = user.rightHand;				var pad:Number = .3;				_rightHandCursor.enabled = true;				if(rightHand.position.worldRelative.x > pad || rightHand.position.worldRelative.x < -pad) _rightHandCursor.enabled = false;				if(rightHand.position.worldRelative.y > pad && rightHand.position.worldRelative.y < -pad) _rightHandCursor.enabled = false;				if(!_rightHandCursor.enabled) return;				var xPos:Number = (rightHand.position.worldRelative.x + pad) / (pad*2);				var yPos:Number = (-rightHand.position.worldRelative.y + pad) / (pad*2);				_rightHandCursor.update(xPos,  yPos,  rightHand.position.worldRelative.z);				curs.x = circle.x - curs.width/2;				curs.y = circle.y - curs.height/2;			}			if(_rightHandCursor.state == "captured"){////////////////////////////////////////////				if(curs.alpha != 0){					Tweener.addTween(curs, {alpha:0, time: 0.2, transition: "linear"});				}			}			if(_rightHandCursor.state == "free"){				if(curs.alpha != 1){					Tweener.addTween(curs, {alpha:1, time: 0.2, transition: "linear"});				}			}			/*if(curs.numChildren != -1){				setChildIndex(curs,numChildren - 1);			}*/		}		protected function create():void {			UIManager.init(stage);			MouseSimulator.init(stage);			createCursor();			createGallery();			setChildIndex(curs,numChildren - 1);		}		public function quit():void {			stopDemoImplementation();		}		protected function stopDemoImplementation():void { 			UIManager.dispose();			removeListeners();			this.removeChildren();		}				private function createGallery():void {			_gallery = new Sprite();			this.addChild(_gallery);			target = new ColoredHandle(0xffffffff, 65);			target.x = 1083;			target.y = 632;			//target.showCaptureArea();			target.addEventListener(UIEvent.SELECTED, onHandleSelected, false, 0, true);			_gallery.addChild(target);		}		private function onHandleSelected(event:UIEvent):void {			dispatchEvent(new NavigationEvent(NavigationEvent.MAK_BACK))		}		public function removeListeners():void		{			removeEventListener(Event.ADDED_TO_STAGE, addedToStage);			removeEventListener(Event.ENTER_FRAME, enterFrameHandler);						target.removeEventListener(UIEvent.SELECTED, onHandleSelected);		}	}}