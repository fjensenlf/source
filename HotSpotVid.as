package  {		import com.as3nui.nativeExtensions.air.kinect.Kinect;	//import com.as3nui.nativeExtensions.air.kinect.KinectSettings;	//import com.as3nui.nativeExtensions.air.kinect.constants.CameraResolution;	//import com.as3nui.nativeExtensions.air.kinect.data.DeviceCapabilities;	import com.as3nui.nativeExtensions.air.kinect.data.SkeletonJoint;	import com.as3nui.nativeExtensions.air.kinect.data.User;	import com.as3nui.nativeExtensions.air.kinect.events.UserEvent;	import com.as3nui.nativeExtensions.air.kinect.events.CameraImageEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceErrorEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceInfoEvent;		import com.as3nui.airkinect.extended.demos.ui.display.SimpleSelectionTimer2;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.components.HotSpot;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.components.Target;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.events.UIEvent;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.objects.Cursor;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.helpers.MouseSimulator;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.managers.UIManager;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.display.BaseTimerSprite;	import com.as3nui.airkinect.extended.demos.ui.display.ColoredHandle;//////////////////////////////////////////////////////		import flash.net.URLRequest;	import flash.display.Loader;	import flash.display.Shape;	import flash.events.Event;	import caurina.transitions.Tweener;	import flash.display.Stage;	import flash.display.Loader;		//import com.as3nui.nativeExtensions.air.kinect.examples.DemoBase;	import flash.display.Sprite;	import flash.utils.*;	public class HotSpotVid extends Sprite {		private var _gallery:Sprite;		//Gallery		public var instances:Array;		public var target:Target;		public var target1:Target;		public var handle0:ColoredHandle;		public var handle1:ColoredHandle;		public var hotSpot:HotSpot;		//public var hotSpotBar:Sprite;		public var bool:Boolean;		public var btn:Loader;		public var deactivate:Boolean;		public var rMenu;		protected var _rightHandCursor:Cursor;		public var device:Kinect;		public var curs:Loader;		public var threshold:Number;		public function HotSpotVid(kin:Kinect) {			bool = true;			deactivate = true;			threshold = 0.25;			//create();			addEventListener(Event.ENTER_FRAME, enterFrameHandler, false, 0, true);			device=kin;			curs = new Loader();            curs.load(new URLRequest("/src/images/embedded/cursor.png"));            addChild(curs);									//curs.x = -curs.width;			//curs.y = -curs.height;			//curs.alpha = 0;			addEventListener(Event.ADDED_TO_STAGE, addedToStage, false, 0, true);						btn = new Loader();			btn.load(new URLRequest("/src/images/embedded/galMakingBtn.png"));			btn.x = 703;			btn.y = 613;					}				private function createCursor():void {				_rightHandCursor = new Cursor("_kinect_", 1, curs);				UIManager.addCursor(_rightHandCursor);				_rightHandCursor.enabled = false;		}		public function addedToStage(e:Event){			create();					}		private function enterFrameHandler(event:Event):void {			//trace(device.users.length);			if(device.usersWithSkeleton.length >0){												//trace("há esqueleto");								var user:User = device.usersWithSkeleton[0];				var rightHand:SkeletonJoint = user.rightHand;				var tor:SkeletonJoint = user.torso;				var pad:Number = .3;				_rightHandCursor.enabled = true;				if(rightHand.position.worldRelative.x > pad || rightHand.position.worldRelative.x < -pad) _rightHandCursor.enabled = false;				if(rightHand.position.worldRelative.y > pad && rightHand.position.worldRelative.y < -pad) _rightHandCursor.enabled = false;				if(!_rightHandCursor.enabled) return;				var xPos:Number = (rightHand.position.worldRelative.x + pad) / (pad*2);				var yPos:Number = (-rightHand.position.worldRelative.y + pad) / (pad*2);				_rightHandCursor.update(xPos,  yPos,  rightHand.position.worldRelative.z);								if(rightHand.position.worldRelative.z + threshold < tor.position.worldRelative.z && deactivate){					Tweener.addTween(curs, {alpha:1, time: 1, transition: "linear"});					deactivate = false;					dispatchEvent(new NavigationEvent(NavigationEvent.REMOVE_HAND));				}			}		}		protected function create():void {			//super.create();			UIManager.init(stage);			MouseSimulator.init(stage);						createCursor();			createGallery();			createHotSpots();			//removeListener(Event.ADDED_TO_STAGE, addedToStage);		}		public function quit():void {			stopDemoImplementation();		}		protected function stopDemoImplementation():void { //override protected /////////////////////////////////			//super.stopDemoImplementation();			UIManager.dispose();			removeListeners();			this.removeChildren();		}				private function createGallery():void {			_gallery = new Sprite();			this.addChild(_gallery);			handle0 = new ColoredHandle(0xffffffff, 45);			handle0.x = 760;			handle0.y = 650;			handle0.addEventListener(UIEvent.SELECTED, onHandleSelected, false, 0, true);			handle0.addEventListener(UIEvent.OVER, onHandleOver, false, 0, true);			handle0.addEventListener(UIEvent.OUT, onHandleOut, false, 0, true);			handle0.name = "galeria";						//handle0.showCaptureArea();			//instances.push(target.name);						//target1.width = 150										handle1 = new ColoredHandle(0xffffffff, 40);			handle1.x = 910;			handle1.y = 655;			handle1.addEventListener(UIEvent.SELECTED, onHandleSelected, false, 0, true);			handle1.addEventListener(UIEvent.OVER, onHandleOver, false, 0, true);			handle1.addEventListener(UIEvent.OUT, onHandleOut, false, 0, true);			handle1.name = "making";			//handle1.showCaptureArea();			_gallery.addChild(btn);			_gallery.addChild(handle0);			_gallery.addChild(handle1);			//instances.push(target1.name);			_gallery.y = 187;//(stage.stageHeight / 2) - (_gallery.height / 2);		}		private function onHandleSelected(event:UIEvent):void {			if(rMenu != null)			{				clearInterval(rMenu);			}			dispatchEvent(new CustomEvent(CustomEvent.INSTANCE_NAME, event.currentTarget.name, 0))		}		private function onHandleOver(event:UIEvent):void {			if(rMenu != null)			{				clearInterval(rMenu);			}		}		private function onHandleOut(event:UIEvent):void {			rMenu = setInterval(removeMenu,5000);		}		private function createHotSpots():void {			function getHotSpotGraphic():Sprite {				var s:Sprite = new Sprite();				s.graphics.beginFill(0xffffff);				s.graphics.drawRect(0, 0, 120, 120);				s.alpha = 0;				return s;			}			var box:Sprite = getHotSpotGraphic();						hotSpot = new HotSpot(getHotSpotGraphic());			this.addChild(hotSpot);			hotSpot.x = 1086;			hotSpot.y = 641;			//hotSpot.data = i;			hotSpot.addEventListener(UIEvent.OVER, onHotSpotOver, false, 0, true);		}		private function onHotSpotOver(event:UIEvent):void {			if(rMenu != null)			{				clearInterval(rMenu);			}			Tweener.addTween(_gallery, {y:0, time: 0.5, transition: "easeOutQuad"});			rMenu = setInterval(removeMenu,5000);			/*var _currentSectionIndex = (event.currentTarget as HotSpot).data as uint;			changeSections();			dispatchEvent(new CustomEvent(CustomEvent.GENERO,"genero", _currentSectionIndex))*/		}		public function removeMenu(){			Tweener.addTween(_gallery, {y:187, time: 0.5, transition: "easeInQuad"});			clearInterval(rMenu);		}		public function removeListeners():void		{			removeEventListener(Event.ADDED_TO_STAGE, addedToStage);			removeEventListener(Event.ENTER_FRAME, enterFrameHandler);						handle0.removeEventListener(UIEvent.SELECTED, onHandleSelected);			handle0.removeEventListener(UIEvent.OVER, onHandleOver);			handle0.removeEventListener(UIEvent.OUT, onHandleOut);						handle1.removeEventListener(UIEvent.SELECTED, onHandleSelected);			handle1.removeEventListener(UIEvent.OVER, onHandleOver);			handle1.removeEventListener(UIEvent.OUT, onHandleOut);						hotSpot.removeEventListener(UIEvent.OVER, onHotSpotOver);					}	}}