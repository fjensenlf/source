package  {	import com.as3nui.nativeExtensions.air.kinect.Kinect;	import com.as3nui.nativeExtensions.air.kinect.KinectSettings;	import com.as3nui.nativeExtensions.air.kinect.constants.CameraResolution;	import com.as3nui.nativeExtensions.air.kinect.data.DeviceCapabilities;	import com.as3nui.nativeExtensions.air.kinect.data.SkeletonJoint;	import com.as3nui.nativeExtensions.air.kinect.data.User;	import com.as3nui.nativeExtensions.air.kinect.events.UserEvent;	import com.as3nui.nativeExtensions.air.kinect.events.CameraImageEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceErrorEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceInfoEvent;	import com.as3nui.airkinect.extended.demos.ui.UIHotSpotDemo;		import flash.display.Sprite;	import flash.events.Event;	import flash.display.Bitmap;	import flash.geom.Point;	import flash.utils.Dictionary;	import flash.filters.BlurFilter;	import flash.geom.Vector3D;	import flash.utils.describeType;	import flash.geom.ColorTransform;	import flash.events.KeyboardEvent;	import flash.display.Stage;		public class KinectCaller extends Sprite{								public var gal:GaleriaInt;		public var vid:video;		public var hand:Hand;		public var galVid:galeriaL;		public var vGalBtn:GalVidBtn;				    	public var device:Kinect;    	public var depthImage:Bitmap;				public var userNumb:int;		public var userBool:Boolean;		    	public var userMasks:Vector.<Bitmap>;    	public var userMaskDictionary:Dictionary;				//public var sombra:Sombra;		//public var ia:GaleriaInt;						//public var vid:video;		//public var cu:ClosestUser;				public var b:Boolean;				public function KinectCaller():void { 			 b = false;						 						         trace("[KinectCaller] Start Demo");        if (Kinect.isSupported())		{            trace("[KinectCaller] Start Kinect");            depthImage = new Bitmap();           	addChild(depthImage);            device = Kinect.getDevice();			device.cameraElevationAngle = 0;			device.addEventListener(DeviceEvent.STARTED, kinectStartedHandler, false, 0, true);            device.addEventListener(DeviceEvent.STOPPED, kinectStoppedHandler, false, 0, true);            device.addEventListener(CameraImageEvent.DEPTH_IMAGE_UPDATE, depthImageUpdateHandler, false, 0, true);						            /*device.addEventListener(UserEvent.USERS_ADDED, usersAddedHandler, false, 0, true);            device.addEventListener(UserEvent.USERS_REMOVED, usersRemovedHandler, false, 0, true);            device.addEventListener(UserEvent.USERS_MASK_IMAGE_UPDATE, usersMaskImageUpdateHandler, false, 0, true);*/            var settings:KinectSettings = new KinectSettings();            settings.depthEnabled = true;            settings.depthResolution = CameraResolution.RESOLUTION_320_240;            settings.userMaskEnabled = true;            settings.userMaskResolution = CameraResolution.RESOLUTION_320_240;			//settings.userMaskResolution = res;			settings.skeletonEnabled = true;			settings.rgbEnabled = true;            device.start(settings);									//ia = new GaleriaInt(device);													videoGaleria();///			 												//addChild(ia);			        	}								    	}			public function videoGaleria():void		{			vid = new video(device);			addChild(vid);			galVid = new galeriaL();			addChild(galVid);			galVid.addEventListener(NavigationEvent.VIDEO_PLAY, playFromGallery);		}		public function galeria():void		{			gal = new GaleriaInt(device);			addChild(gal);			gal.addEventListener(NavigationEvent.VIDEO_PLAY, playFromGallery);		}		public function playFromGallery(event:NavigationEvent):void		{			vid = new video(device);			addChild(vid);			removeChild(gal);			gal = null;		}		public function handShadow():void		{			hand = new Hand();			addChild(hand);			hand.addEventListener(NavigationEvent.HAND_OVER, removeHand);		}		public function removeHand(event:NavigationEvent):void		{			trace("REMOVED");		}		public function VideoBtnGaleria():void		{			vGalBtn = new GalVidBtn();			addChild(vGalBtn);		}		public function bool(b:Boolean){			//vid.myVideo.stop();			/*if (!b){				b = true;				addChild(sombra);			} else {				b = false;				removeChild(sombra);							}*/										/*if (event.keyCode == 38) {				device.cameraElevationAngle = device.cameraElevationAngle + 5;			} else if (event.keyCode == 40) {				device.cameraElevationAngle= device.cameraElevationAngle - 5;			}										trace(device.cameraElevationAngle);*/					}		protected function depthImageUpdateHandler(event:CameraImageEvent):void {       	    //depthImage.bitmapData = event.imageData;			//userNumbAndBool();			//bool(userBool);			//trace("the number of users is " + userNumb);// + " and shadows are " + fC.shadowOn);    	}				protected function kinectStartedHandler(event:DeviceEvent):void {        	trace("[kinectCaller] Kinect Started");    	}			protected function kinectStoppedHandler(event:DeviceEvent):void {      	  trace("[kinectCaller] Kinect Stopped");    	}			/*public function userNumbAndBool()		{			userNumb = device.users.length;			//trace(userNumb);			if (userNumb>0){				userBool = true;			}else{				userBool = false;			}					}*/	}	}