package  {	import com.as3nui.nativeExtensions.air.kinect.Kinect;	//import com.as3nui.nativeExtensions.air.kinect.KinectSettings;	//import com.as3nui.nativeExtensions.air.kinect.constants.CameraResolution;	//import com.as3nui.nativeExtensions.air.kinect.data.DeviceCapabilities;	import com.as3nui.nativeExtensions.air.kinect.data.SkeletonJoint;	import com.as3nui.nativeExtensions.air.kinect.data.User;	import com.as3nui.nativeExtensions.air.kinect.events.UserEvent;	import com.as3nui.nativeExtensions.air.kinect.events.CameraImageEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceErrorEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceInfoEvent;		import com.as3nui.airkinect.extended.demos.ui.display.SimpleSelectionTimer;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.components.HotSpot;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.components.Target;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.events.UIEvent;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.objects.Cursor;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.helpers.MouseSimulator;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.managers.UIManager;	import com.as3nui.nativeExtensions.air.kinect.extended.ui.display.BaseTimerSprite;		import flash.net.URLRequest;	import flash.display.Loader;	import flash.display.Shape;	import flash.events.Event;	import com.greensock.TweenLite;	import flash.display.Stage;		//import com.as3nui.nativeExtensions.air.kinect.examples.DemoBase;	import flash.display.Sprite;	import flash.text.TextField;	public class HotSpotGal extends Sprite {		private var _gallery:Sprite;		private var _info:TextField;		//Gallery		private var _totalSections:uint;		private var _totalAreas:uint;		private var _totalSectionSize:Number;		private var _totalSectionHeight:Number;		private var _currentSectionIndex:int;		private var _sectionPadding:Number;		public var instances:Array;////////////////////////////////////////////////////////		public var instanceVid:Array;////////////////////////////////////////////////////////		public var target:Target;////////////////////////////////////////////////////////		public var hotSpot:HotSpot;////////////////////////////////////////////////////////		public var hotSpotBar:Sprite;////////////////////////////////////////////////		public var bool:Boolean;		protected var _rightHandCursor:Cursor;		public var device:Kinect;		//public var circle:Shape;		public var curs:Loader;		public function HotSpotGal(kin:Kinect) {			bool = true;			//create();			addEventListener(Event.ENTER_FRAME, enterFrameHandler, false, 0, true);			device=kin;			curs = new Loader();            curs.load(new URLRequest("/src/images/embedded/cursor.png"));            addChild(curs);									curs.x = -curs.width;			curs.y = -curs.height;			addEventListener(Event.ADDED_TO_STAGE, addedToStage, false, 0, true);					}				private function createCursor():void {			_rightHandCursor = new Cursor("_kinect_", 1, curs);			UIManager.addCursor(_rightHandCursor);			_rightHandCursor.enabled = false;		}		public function addedToStage(e:Event){			if(bool){				create();				bool = false;			}		}		private function enterFrameHandler(event:Event):void {						//trace(device.users.length);			if(device.usersWithSkeleton.length >0){												//trace("há esqueleto");								var user:User = device.usersWithSkeleton[0];				var rightHand:SkeletonJoint = user.rightHand;				var pad:Number = .3;				_rightHandCursor.enabled = true;				if(rightHand.position.worldRelative.x > pad || rightHand.position.worldRelative.x < -pad) _rightHandCursor.enabled = false;				if(rightHand.position.worldRelative.y > pad && rightHand.position.worldRelative.y < -pad) _rightHandCursor.enabled = false;				if(!_rightHandCursor.enabled) return;				var xPos:Number = (rightHand.position.worldRelative.x + pad) / (pad*2);				var yPos:Number = (-rightHand.position.worldRelative.y + pad) / (pad*2);				_rightHandCursor.update(xPos,  yPos,  rightHand.position.worldRelative.z);			}		}		protected function create():void {			//super.create();			UIManager.init(stage);			MouseSimulator.init(stage);						createCursor();			createGallery();			createHotSpots();			//removeListener(Event.ADDED_TO_STAGE, addedToStage);		}		public function quit():void {			stopDemoImplementation();		}		protected function stopDemoImplementation():void { //override protected /////////////////////////////////			//super.stopDemoImplementation();			UIManager.dispose();			removeListeners();			this.removeChildren();		}		private function createGallery():void {			_gallery = new Sprite();			this.addChild(_gallery);			function getBox():Sprite {				var s:Sprite = new Sprite();				//s.graphics.beginFill(Math.random() * 0xffffff);				s.graphics.beginFill(0xffffff);////////////////////////////////////////////////////				s.graphics.drawRect(0, 0, 150, 200);				s.alpha = 0;				return s;			}						var box:Sprite = getBox();			_totalSections = 1;			_totalAreas = 2;			var totalRows:uint = 2;			var totalColumns:int = 6;			var rowSpacing:uint = 102;			var colSpacing:uint = 52;			_totalSectionSize = (totalRows * box.width) + (totalRows * rowSpacing);			_totalSectionHeight = (totalRows * box.height) + (totalColumns * colSpacing);			//_sectionPadding = (stage.stageWidth - _totalSectionSize) /2;			_sectionPadding = 10;			instances = new Array();//////////////////////////////////////////////////////////////////			instanceVid = new Array();////////////////////////////////////////////////////////////////			//for (var sectionIndex:uint = 0; sectionIndex < _totalSections; sectionIndex++) {				for (var row:uint = 0; row < totalRows; row++) {					for (var col:uint = 0; col < totalColumns; col++) {						box = getBox();						target = new Target(box, new SimpleSelectionTimer());						/*target.x += ((sectionIndex + 1) * _sectionPadding);						target.x += ((sectionIndex * totalColumns) * box.width);						target.x += ((sectionIndex * totalRows) * rowSpacing);*/						target.x += (row * box.width);						target.x += (row * rowSpacing);						target.y = col * (box.height + colSpacing);						if(col >= 3){							target.y += 23;						}						target.addEventListener(UIEvent.SELECTED, onHandleSelected);						if(col == 2 && row == 0){							target.x = target.x + 10;							target.y = target.y + 25;						}						if(col == 5 && row == 0){							target.x = target.x + 10;							target.y = target.y + 25;						}						_gallery.addChild(target);						instances.push(target.name);						if(col == 2 && row == 0){							instances.pop();							instanceVid.push(target.name);						}						if(col == 5 && row == 0){							instances.pop();							instanceVid.push(target.name);						}											}				}			_info = new TextField();			_info.y = 20;			this.addChild(_info);			//target.addEventListener(UIEvent.SELECTED, onHandleSelected);			//target.showCaptureArea();			_currentSectionIndex = Math.floor(_totalSections / 2);			_gallery.x = 60;//-_currentSectionIndex * (_totalSectionSize + _sectionPadding);			_gallery.y = 48;//(stage.stageHeight / 2) - (_gallery.height / 2);		}		private function onHandleSelected(event:UIEvent):void {			dispatchEvent(new CustomEvent(CustomEvent.INSTANCE_NAME, event.currentTarget.name, 0))		}		private function createHotSpots():void {			var hotSpotBar:Sprite = new Sprite();			this.addChild(hotSpotBar);			function getHotSpotGraphic():Sprite {				var s:Sprite = new Sprite();				s.graphics.beginFill(0xffffff);///////////////////////////////////////////////				s.graphics.drawRect(0, 0, 100, 91);				s.alpha = 0;				return s;			}			var box:Sprite = getHotSpotGraphic();			var hotspotPadding:int = 51;			for (var i:uint = 0; i < _totalAreas; i++) {				hotSpot = new HotSpot(getHotSpotGraphic());				hotSpot.x = i * hotspotPadding + (i * box.height);				hotSpot.data = i;				hotSpotBar.addChild(hotSpot);				hotSpot.addEventListener(UIEvent.OVER, onHotSpotOver, false, 0, true);			}			hotSpotBar.x = 734; //(stage.stageWidth / 2) - (hotSpotBar.width / 2);			hotSpotBar.y = 0;		}		private function onHotSpotOver(event:UIEvent):void {			_currentSectionIndex = (event.currentTarget as HotSpot).data as uint;			changeSections();			dispatchEvent(new CustomEvent(CustomEvent.GENERO,"genero", _currentSectionIndex))		}		private function changeSections():void {			if (_currentSectionIndex == 0){				_gallery.y = 48;			}			if (_currentSectionIndex == 1){				_gallery.y = -730;////////////////////////////////////////////////////////////////			}			//TweenLite.to(_gallery, 1, {y:-_currentSectionIndex * (_totalSectionHeight + _sectionPadding)});		}		public function removeListeners():void		{			removeEventListener(Event.ADDED_TO_STAGE, addedToStage);			removeEventListener(Event.ENTER_FRAME, enterFrameHandler);						target.removeEventListener(UIEvent.SELECTED, onHandleSelected);			hotSpot.removeEventListener(UIEvent.OVER, onHotSpotOver);		}	}}