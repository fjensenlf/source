package{ 		import com.as3nui.nativeExtensions.air.kinect.Kinect;	import com.as3nui.nativeExtensions.air.kinect.KinectSettings;	import com.as3nui.nativeExtensions.air.kinect.constants.CameraResolution;	import com.as3nui.nativeExtensions.air.kinect.data.DeviceCapabilities;	import com.as3nui.nativeExtensions.air.kinect.data.SkeletonJoint;	import com.as3nui.nativeExtensions.air.kinect.data.User;	import com.as3nui.nativeExtensions.air.kinect.events.UserEvent;	import com.as3nui.nativeExtensions.air.kinect.events.CameraImageEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceErrorEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceInfoEvent;		import flash.display.Sprite;	import flash.events.Event;	import flash.display.Sprite;	import flash.events.Event;	import flash.display.Bitmap;	import flash.geom.Point;	import flash.utils.Dictionary;	import flash.filters.BlurFilter;	import flash.geom.Vector3D;	import flash.utils.describeType;	import flash.geom.ColorTransform;	import flash.events.KeyboardEvent;	import flash.display.Stage;	public class BaseD extends Sprite{		protected var demoStarted:Boolean;		protected var explicitWidth:Number = 800;		protected var explicitHeight:Number = 600;				public var device:Kinect;		public var depthImage:Bitmap;						public var userNumb:int;		public var userBool:Boolean;				public var userMasks:Vector.<Bitmap>;		public var userMaskDictionary:Dictionary;					public var hotS:HotSpotGal;		public var b:Boolean;		public function BaseD() {			demoStarted = false;			addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler, false, 0, true);			addEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler, false, 0, true);			KinectCaller();									/////								}		public function KinectCaller():void { 			b = false;								 							//stage.addEventListener(KeyboardEvent.KEY_DOWN, bool); 			trace("[KinectCaller] Start Demo");			if (Kinect.isSupported())			{				trace("[KinectCaller] Start Kinect");					depthImage = new Bitmap();				addChild(depthImage);					device = Kinect.getDevice();				device.cameraElevationAngle = 0;				device.addEventListener(DeviceEvent.STARTED, kinectStartedHandler, false, 0, true);				device.addEventListener(DeviceEvent.STOPPED, kinectStoppedHandler, false, 0, true);				device.addEventListener(CameraImageEvent.DEPTH_IMAGE_UPDATE, depthImageUpdateHandler, false, 0, true);												/*device.addEventListener(UserEvent.USERS_ADDED, usersAddedHandler, false, 0, true);				device.addEventListener(UserEvent.USERS_REMOVED, usersRemovedHandler, false, 0, true);				device.addEventListener(UserEvent.USERS_MASK_IMAGE_UPDATE, usersMaskImageUpdateHandler, false, 0, true);*/					var settings:KinectSettings = new KinectSettings();				settings.depthEnabled = true;				settings.depthResolution = CameraResolution.RESOLUTION_320_240;					settings.userMaskEnabled = true;				settings.userMaskResolution = CameraResolution.RESOLUTION_320_240;				//settings.userMaskResolution = res;				settings.skeletonEnabled = true;				settings.rgbEnabled = true;				device.start(settings);				//device.cameraElevationAngle= 5;								//ia = new GaleriaInt(device);												hotS = new HotSpotGal(device);								 																//addChild(ia);								}								}			protected function addedToStageHandler(event:Event):void {			startDemo();		}			private function removedFromStageHandler(event:Event):void {			stopDemo();		}			public function startDemo():void {			if (!demoStarted) {				demoStarted = true;				startDemoImplementation();							}		}			public function stopDemo():void {			if (demoStarted) {				demoStarted = false;				stopDemoImplementation();			}		}			protected function startDemoImplementation():void {			addChild(hotS);		}			protected function stopDemoImplementation():void {		}				protected function kinectStartedHandler(event:DeviceEvent):void {////			trace("[kinectCaller] Kinect Started");		}				protected function kinectStoppedHandler(event:DeviceEvent):void {////			trace("[kinectCaller] Kinect Stopped");		}		protected function depthImageUpdateHandler(event:CameraImageEvent):void {///			//depthImage.bitmapData = event.imageData;			//userNumbAndBool();			//bool(userBool);			//trace("the number of users is " + userNumb);// + " and shadows are " + fC.shadowOn);		}		/*public function bool(event:KeyboardEvent){											var angle:int;			angle = device.cameraElevationAngle;							if (event.keyCode == 38) {					if (device.cameraElevationAngle < 25){					device.cameraElevationAngle = device.cameraElevationAngle  + 5;					} else {						device.cameraElevationAngle = 20;					}				} else if (event.keyCode == 40) {					if (device.cameraElevationAngle > 0){					device.cameraElevationAngle = device.cameraElevationAngle - 5;					} else {						device.cameraElevationAngle = 1;					}				}												trace(device.cameraElevationAngle);						}*/					public function setSize(width:Number, height:Number):void {			explicitWidth = width;			explicitHeight = height;					}		}}