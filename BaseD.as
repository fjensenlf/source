package{ 		import com.as3nui.nativeExtensions.air.kinect.Kinect;	import com.as3nui.nativeExtensions.air.kinect.KinectSettings;	import com.as3nui.nativeExtensions.air.kinect.constants.CameraResolution;	import com.as3nui.nativeExtensions.air.kinect.data.DeviceCapabilities;	import com.as3nui.nativeExtensions.air.kinect.data.SkeletonJoint;	import com.as3nui.nativeExtensions.air.kinect.data.User;	import com.as3nui.nativeExtensions.air.kinect.events.UserEvent;	import com.as3nui.nativeExtensions.air.kinect.events.CameraImageEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceErrorEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceInfoEvent;		import flash.display.Sprite;	import flash.events.Event;	import flash.display.Bitmap;	import flash.geom.Point;	import flash.utils.Dictionary;	import flash.filters.BlurFilter;	import flash.geom.Vector3D;	//import flash.geom.ColorTransform;	import flash.events.KeyboardEvent;	import flash.display.Stage;	import flash.utils.*;	import flash.geom.Matrix;	import flash.filters.ColorMatrixFilter;	//import flash.display.BitmapData;////////////////////////		public class BaseD extends Sprite{		protected var demoStarted:Boolean;		protected var explicitWidth:Number = 800;		protected var explicitHeight:Number = 600;				public var device:Kinect;		public var depthImage:Bitmap;						public var userNumb:int;		public var userBool:Boolean;				public var userMasks:Vector.<Bitmap>;		public var userMaskDictionary:Dictionary;					public var hotS:HotSpotGal;		public var hotSV:HotSpotVid;		//public var sombra:Boolean;				public var myBlur:BlurFilter;		public var hand:Hand;		public var test;		public var sombra:Sombra;		public var boolBtn:Boolean;		public function BaseD() {			demoStarted = false;			boolBtn = false;			addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler, false, 0, true);			addEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler, false, 0, true);						KinectCaller();		}		public function KinectCaller():void { 			//sombra = true;			//stage.addEventListener(KeyboardEvent.KEY_DOWN, bool); 			trace("[KinectCaller] Start Process");			if (Kinect.isSupported())			{				trace("[KinectCaller] Start Kinect");					depthImage = new Bitmap();				addChild(depthImage);								myBlur = new BlurFilter (30,30,2);///////////////////////////////////////////////////////////////////////////////////////////////					userMasks = new Vector.<Bitmap>();				userMaskDictionary = new Dictionary();					device = Kinect.getDevice();				device.cameraElevationAngle = 0;				device.addEventListener(DeviceEvent.STARTED, kinectStartedHandler, false, 0, true);				/*device.addEventListener(UserEvent.USERS_ADDED, usersAddedHandler, false, 0, true);				device.addEventListener(UserEvent.USERS_REMOVED, usersRemovedHandler, false, 0, true);				device.addEventListener(UserEvent.USERS_MASK_IMAGE_UPDATE, usersMaskImageUpdateHandler, false, 0, true);				device.addEventListener(UserEvent.USERS_WITH_SKELETON_ADDED, skeletonsAddedHandler, false, 0, true);    			device.addEventListener(UserEvent.USERS_WITH_SKELETON_REMOVED, skeletonsRemovedHandler, false, 0, true);				device.addEventListener(CameraImageEvent.DEPTH_IMAGE_UPDATE, depthImageUpdateHandler, false, 0, true);				device.addEventListener(DeviceEvent.STOPPED, kinectStoppedHandler, false, 0, true);*/								var settings:KinectSettings = new KinectSettings();				settings.depthEnabled = true;				settings.depthResolution = CameraResolution.RESOLUTION_320_240;					settings.userMaskEnabled = true;				settings.userMaskResolution = CameraResolution.RESOLUTION_320_240;				//settings.userMaskResolution = res;				settings.skeletonEnabled = true;				settings.rgbEnabled = true;				device.start(settings);				//device.cameraElevationAngle= 5;				/*sombra = new Sombra();				addChild(sombra);*/				addEventListener(NavigationEvent.INIT_BS, hotSMenuInstance)				addEventListener(NavigationEvent.INIT_GAL, hotSGalInstance)								//addEventListener(ChildEvent.HOTSPOT_VIDEO, childStage);								//hSV = new HotSpotVid(device);				trace("ESTOU A CARREGAR LISTNERS");				}								}		public function hotSMenuInstance(event:NavigationEvent):void{			hotSV = new HotSpotVid(device);			addChild(hotSV);			hotSV.addEventListener(CustomEvent.INSTANCE_NAME, disposeHotSpotVid);		}		public function hotSGalInstance(event:NavigationEvent):void{			hotS = new HotSpotGal(device);			addChild(hotS);			hotS.addEventListener(CustomEvent.INSTANCE_NAME, disposeHotSpotGal);		}		public function disposeHotSpotGal(event:CustomEvent):void{			for (var e:Number = 0; e < hotS.instanceVid.length; e++)			{				if( hotS.instanceVid[e]== event.data){					hotS.quit();					removeChild(hotS);					hotS = null;					return				}			}		}		public function disposeHotSpotVid(event:CustomEvent):void{			if( event.data == "galeria"){				hotSV.quit();				removeChild(hotSV);				hotSV = null;				dispatchEvent(new NavigationEvent(NavigationEvent.INIT_GAL));			}			if( event.data == "making"){				dispatchEvent(new NavigationEvent(NavigationEvent.INIT_MAK));			}		}		protected function addedToStageHandler(event:Event):void {			startDemo();		}			private function removedFromStageHandler(event:Event):void {			stopDemo();		}			public function startDemo():void {			if (!demoStarted) {				demoStarted = true;				startDemoImplementation();			}		}			public function stopDemo():void {			if (demoStarted) {				demoStarted = false;				stopDemoImplementation();			}		}			protected function startDemoImplementation():void {			trace("[kinectCaller] Start Demo");		}			protected function stopDemoImplementation():void {		}				protected function kinectStartedHandler(event:DeviceEvent):void {////			trace("[kinectCaller] Kinect Started");		}				public function abs( value:Number ):Number		{			return value < 0 ? -value : value;		}		public function closest()		{			var closestUser:User;			for each(var user:User in device.users) {            	closestUser ||= user;            	if (user.position.world.z < closestUser.position.world.z)				{					closestUser = user;				}			}			return closestUser.trackingID;		}		public function centered()		{			var closestUser:User;			for each(var user:User in device.users) {            	closestUser ||= user;            	if (abs(user.position.world.x) < abs(closestUser.position.world.x))				{					closestUser = user;				}			}			return closestUser.trackingID;		}	}}