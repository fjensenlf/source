package com.as3nui.nativeExtensions.air.kinect.examples.userMask {	import com.as3nui.nativeExtensions.air.kinect.Kinect;	import com.as3nui.nativeExtensions.air.kinect.KinectSettings;	import com.as3nui.nativeExtensions.air.kinect.constants.CameraResolution;	import com.as3nui.nativeExtensions.air.kinect.data.User;	import com.as3nui.nativeExtensions.air.kinect.events.CameraImageEvent;	import com.as3nui.nativeExtensions.air.kinect.events.DeviceEvent;	import com.as3nui.nativeExtensions.air.kinect.events.UserEvent;	import com.as3nui.nativeExtensions.air.kinect.examples.DemoBase;	import com.bit101.components.CheckBox;	import com.bit101.utils.MinimalConfigurator;		import flash.display.Bitmap;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.utils.Dictionary;	import flash.geom.Matrix;////////////////////////////////////////////////////////////////	import flash.filters.ColorMatrixFilter;////////////////////////////////////////////////////////////////	import flash.display.BitmapData;////////////////////////	import flash.filters.BlurFilter;///////////////////////////////////////////////////////////		public class Sombra extends DemoBase {			private static const TOP_LEFT:Point = new Point(0, 0);			private var device:Kinect;		private var depthImage:Bitmap;			public var chk_depthMirror:CheckBox;		public var chk_userMaskMirror:CheckBox;			private var userMasks:Vector.<Bitmap>;		private var userMaskDictionary:Dictionary;				public var myBlur:BlurFilter;//////////////////////////////////////////////////////////////////////////////////////////////////////////////			override protected function startDemoImplementation():void {			trace("[UserMaskDemo] Start Demo");			if (Kinect.isSupported()) {				trace("[UserMaskDemo] Start Kinect");								myBlur = new BlurFilter (30,30,2);///////////////////////////////////////////////////////////////////////////////////////////////					depthImage = new Bitmap();				addChild(depthImage);					userMasks = new Vector.<Bitmap>();				userMaskDictionary = new Dictionary();					device = Kinect.getDevice();					device.addEventListener(DeviceEvent.STARTED, kinectStartedHandler, false, 0, true);				device.addEventListener(DeviceEvent.STOPPED, kinectStoppedHandler, false, 0, true);//				device.addEventListener(CameraImageEvent.DEPTH_IMAGE_UPDATE, depthImageUpdateHandler, false, 0, true);				device.addEventListener(UserEvent.USERS_ADDED, usersAddedHandler, false, 0, true);				device.addEventListener(UserEvent.USERS_REMOVED, usersRemovedHandler, false, 0, true);				device.addEventListener(UserEvent.USERS_MASK_IMAGE_UPDATE, usersMaskImageUpdateHandler, false, 0, true);					var settings:KinectSettings = new KinectSettings();				settings.depthEnabled = true;				settings.depthResolution = CameraResolution.RESOLUTION_320_240;					settings.userMaskEnabled = true;				settings.userMaskResolution = CameraResolution.RESOLUTION_320_240;					device.start(settings);			}		}				protected function usersAddedHandler(event:UserEvent):void {			for each(var user:User in event.users) {				var bmp:Bitmap = new Bitmap();				userMasks.push(bmp);				userMaskDictionary[user.userID] = bmp;				addChild(bmp);			}			layout();		}			protected function usersRemovedHandler(event:UserEvent):void {			for each(var user:User in event.users) {				var bmp:Bitmap = userMaskDictionary[user.userID];				if (bmp != null) {					if (bmp.parent != null) {						bmp.parent.removeChild(bmp);					}					var index:int = userMasks.indexOf(bmp);					if (index > -1) {						userMasks.splice(index, 1);					}				}				delete userMaskDictionary[user.userID];			}		}			/*protected function depthImageUpdateHandler(event:CameraImageEvent):void {							 			depthImage.bitmapData = event.imageData;					}*/			protected function kinectStartedHandler(event:DeviceEvent):void {			trace("[UserMaskDemo] Kinect Started");		}			protected function kinectStoppedHandler(event:DeviceEvent):void {			trace("[UserMaskDemo] Kinect Stopped");		}			protected function usersMaskImageUpdateHandler(event:UserEvent):void {									var matrix:Array = [ 0, 0,0,0, 0,////////////////////////////////////////////////////////////////							 0,0,0,0,0,							 0,0,0,0,0,							 0,0,0,0.4,0 ];								   for each(var user:User in event.users) {				var bmp:Bitmap = userMaskDictionary[user.userID];				if (bmp != null) {					bmp.bitmapData = user.userMaskData;					bmp.bitmapData.applyFilter(bmp.bitmapData, bmp.bitmapData.rect, new Point(), new ColorMatrixFilter(matrix));					bmp.width = 1440;					bmp.height = 900;					bmp.x = -110;					bmp.y = -70;				}			}			bmp.filters = [myBlur];		}			override protected function stopDemoImplementation():void {			trace("[UserMaskDemo] Stop Demo");			if (device != null) {				for each(var user:User in device.users) {					if (userMaskDictionary[user.userID] != null && userMaskDictionary[user.userID].bitmapData != null) {						userMaskDictionary[user.userID].bitmapData.dispose();					}					delete userMaskDictionary[user.userID];				}				device.removeEventListener(DeviceEvent.STARTED, kinectStartedHandler);				device.removeEventListener(DeviceEvent.STOPPED, kinectStoppedHandler);				device.removeEventListener(UserEvent.USERS_MASK_IMAGE_UPDATE, usersMaskImageUpdateHandler);				device.stop();			}		}	}}